<?php

use Drupal\wmmailable\Event\MailableAlterEvent;
use Drupal\wmmailable\MailableInterface;
use Drupal\wmmailable\Mailer\MailerInterface;
use Drupal\wmmailable\WmmailableEvents;

/**
 * Implements hook_mail().
 * Sets default values for the mail.
 */
function wmmailable_mail($key, &$message, $params)
{
    if (!$params['mailable'] instanceof MailableInterface) {
        throw new \Exception('Mailable emails should be composed through the wmmailable.mailer service.');
    }

    $message['id'] = $message['module'] . '_' . $key;
    $message['mailable'] = $params['mailable'];

    \Drupal::getContainer()->get('module_handler')
        ->alter(['mailable', "mailable_{$message['id']}"], $params['mailable']);

    \Drupal::getContainer()->get('wmmailable.message_builder')
        ->populateMessage($message, $params['mailable']);
}

/**
 * Implements hook_mail_alter().
 * Allows taking over mails of other modules.
 */
function wmmailable_mail_alter(&$message)
{
    $message['created'] = \Drupal::time()->getRequestTime();

    if ($message['module'] === 'wmmailable') {
        return;
    }

    $manager = \Drupal::getContainer()->get('plugin.manager.mailable');
    /** @var MailerInterface $mailer */
    $mailer = \Drupal::getContainer()->get('wmmailable.mailer');

    foreach ($manager->getDefinitions() as $definition) {
        if (
            $definition['module'] !== $message['module']
            || $definition['id'] !== $message['key']
        ) {
            continue;
        }

        $message['send'] = false;

        $mail = $mailer->create($message['key'])
            ->addRecepient($message['to'])
            ->setFrom($message['from'])
            ->setReplyTo($message['reply-to'])
            ->setParameters($message['params']);

        $mailer->send($mail);

        return;
    }
}

/**
 * Implements hook_wmmailable_alter().
 */
function wmmailable_wmmailable_alter(MailableInterface $mailable)
{
    $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
    $dispatcher->dispatch(WmmailableEvents::MAILABLE_ALTER, new MailableAlterEvent($mailable));
    $dispatcher->dispatch("wmmailable.mailable.{$mailable->getModule()}_{$mailable->getKey()}.alter", new MailableAlterEvent($mailable));
}

/**
 * Implements hook_theme().
 */
function wmmailable_theme()
{
    $manager = \Drupal::getContainer()->get('plugin.manager.mailable');
    $themeName = \Drupal::config('wmmailable.settings')->get('theme')
        ?? \Drupal::config('system.theme')->get('default');
    $languages = \Drupal::getContainer()->get('language_manager')->getLanguages();
    $dir = drupal_get_path('theme', $themeName) . DIRECTORY_SEPARATOR . 'templates';
    $data = [];

    foreach ($manager->getDefinitions() as $id => $definition) {
        if (!empty($definition['template'])) {
            $template = str_replace('.', DIRECTORY_SEPARATOR, $definition['template']);
        } else {
            $template = 'mail' . DIRECTORY_SEPARATOR . str_replace('_', '-', $id);
        }

        $path = $dir . DIRECTORY_SEPARATOR . $template;

        foreach ($languages as $language) {
            $langcode = $language->getId();
            $langPath = sprintf('%s.%s', $path, $langcode);

            if (!file_exists(DRUPAL_ROOT . DIRECTORY_SEPARATOR . $langPath . '.html.twig')) {
                $langPath = $path;
            }

            $themeHook = sprintf('wmmailable.%s.%s', $id, $langcode);
            $themeHook = str_replace('\\', '_', $themeHook);

            $data[$themeHook] = [
                'variables' => [
                    '_data' => [],
                ],
                'path' => dirname($langPath),
                'template' => basename($langPath),
                'preprocess functions' => [
                    'wmmailable_theme_set_variables',
                ],
            ];
        }
    }

    $data['wmmailable'] = [
        'variables' => [
            'body' => [],
        ],
        'path' => drupal_get_path('module', 'wmmailable') . '/templates',
        'template' => 'mailable',
    ];

    return $data;
}

function wmmailable_theme_set_variables(&$variables)
{
    // Skip if no data is set or not set as an array
    if (!isset($variables['_data']) || !is_array($variables['_data'])) {
        return;
    }

    $variables = array_merge($variables, $variables['_data']);
    unset($variables['_data']);
}

/**
 * Implements hook_cron().
 */
function wmmailable_cron()
{
    \Drupal::service('wmmailable.sent_mail.cleaner')->clean();
}
